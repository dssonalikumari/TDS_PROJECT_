
[2025-08-15 22:19:19]
ðŸ“œ Executing Code:
import os
import pandas as pd
import requests
import io

# --- Setup ---
# Create the output directory if it doesn't exist
output_dir = "uploads/278a7c6e-abd9-4fd9-8070-b8415bc89c64"
os.makedirs(output_dir, exist_ok=True)

# Define file paths for data and metadata
data_path = os.path.join(output_dir, "data.csv")
metadata_path = os.path.join(output_dir, "metadata.txt")

# --- Data Scraping and Cleaning ---
# Scrape the table from the Wikipedia page
url = "https://en.wikipedia.org/wiki/List_of_highest-grossing_films"
response = requests.get(url)
# Using io.StringIO to treat the html string as a file for read_html
tables = pd.read_html(io.StringIO(response.text))

# The main table is the first one on the page
df = tables[0]

# Clean the 'Worldwide gross' column by removing non-numeric characters
# and converting to a 64-bit integer
df["Worldwide gross"] = (
    df["Worldwide gross"]
    .astype(str)
    .str.replace(r"[\$,]", "", regex=True)
    .str.replace(r"\[.*?\]", "", regex=True)
)
df["Worldwide gross"] = pd.to_numeric(df["Worldwide gross"], errors="coerce")

# Clean the 'Year' column by extracting the four-digit year
df["Year"] = df["Year"].astype(str).str.extract(r"(\d{4})", expand=False)
df["Year"] = pd.to_numeric(df["Year"], errors="coerce")

# Convert 'Rank' and 'Peak' to numeric types, coercing errors
df["Rank"] = pd.to_numeric(df["Rank"], errors="coerce")
df["Peak"] = pd.to_numeric(df["Peak"], errors="coerce")

# Drop any rows that couldn't be cleaned properly (resulting in NaNs)
df.dropna(subset=["Worldwide gross", "Year", "Rank", "Peak"], inplace=True)

# Convert columns to the appropriate integer types for analysis
df = df.astype(
    {"Worldwide gross": "int64", "Year": "int", "Rank": "int", "Peak": "int"}
)

# Select and reorder columns for clarity
df = df[["Rank", "Peak", "Title", "Worldwide gross", "Year"]]

# --- Data Storage ---
# Save the cleaned DataFrame to a CSV file
df.to_csv(data_path, index=False)

# --- Metadata Generation ---
# Write metadata to the specified file
with open(metadata_path, "w", encoding="utf-8") as f:
    f.write(f"path: {data_path}\n")
    f.write(
        "description: Data on the highest-grossing films, scraped from Wikipedia.\n\n"
    )

    # Capture and write df.info()
    f.write("df.info():\n")
    buffer = io.StringIO()
    df.info(buf=buffer)
    info_str = buffer.getvalue()
    f.write(info_str)
    f.write("\n")

    # Write column names
    f.write("Column names:\n")
    f.write(f"{df.columns.tolist()}\n\n")

    # Write the first few rows of the DataFrame
    f.write("First few rows (df.head()):\n")
    f.write(df.head().to_string())
    f.write("\n\n")

    # Add the specified answer format
    f.write("ANSWER_FORMAT:\n")
    f.write("JSON array\n")

----------------------------------------

[2025-08-15 22:19:27]
âœ… Code executed successfully after installing libraries.
----------------------------------------

[2025-08-15 22:19:53]
ðŸ“œ Executing Code:
import pandas as pd
import json
import matplotlib.pyplot as plt
import seaborn as sns
import io
import base64

# Load the dataset
file_path = "uploads/278a7c6e-abd9-4fd9-8070-b8415bc89c64/data.csv"
df = pd.read_csv(file_path)

# --- Answer Questions ---

# 1. How many $2 bn movies before 2023?
movies_2bn_before_2023 = df[
    (df["Worldwide gross"] >= 2_000_000_000) & (df["Year"] < 2023)
]
count_2bn_movies = len(movies_2bn_before_2023)

# 2. Earliest film over $1.5 bn?
movies_1_5bn = df[df["Worldwide gross"] >= 1_500_000_000]
earliest_film_1_5bn = movies_1_5bn.sort_values("Year").iloc[0]["Title"]

# 3. Correlation between Rank and Peak?
correlation = df["Rank"].corr(df["Peak"])

# 4. Scatterplot of Rank vs Peak with dotted red regression line as base64 PNG.
plt.figure(figsize=(10, 6))
sns.regplot(
    x="Rank",
    y="Peak",
    data=df,
    scatter_kws={"alpha": 0.6},
    line_kws={"color": "red", "linestyle": "--"},
)
plt.title("Rank vs. Peak of Highest-Grossing Films")
plt.xlabel("Rank")
plt.ylabel("Peak")
plt.grid(True)
plt.tight_layout()

# Save plot to a bytes buffer and encode to base64
buf = io.BytesIO()
plt.savefig(buf, format="png")
buf.seek(0)
image_base64 = base64.b64encode(buf.read()).decode("utf-8")
buf.close()

# --- Format Output ---

# The ANSWER_FORMAT is 'JSON array', so we'll create a list of answers.
results = [
    {"question": "How many $2 bn movies before 2023?", "answer": count_2bn_movies},
    {"question": "Earliest film over $1.5 bn?", "answer": earliest_film_1_5bn},
    {"question": "Correlation between Rank and Peak?", "answer": correlation},
    {
        "question": "Scatterplot of Rank vs Peak with dotted red regression line as base64 PNG.",
        "image": image_base64,
    },
]

# Save the results to the specified JSON file
output_path = "uploads/278a7c6e-abd9-4fd9-8070-b8415bc89c64/result.json"
with open(output_path, "w") as f:
    json.dump(results, f, indent=4)

----------------------------------------

[2025-08-15 22:19:53]
âœ… Code executed successfully after installing libraries.
----------------------------------------
